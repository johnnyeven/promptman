generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model t_model {
    index              Int    @id
    name               String @db.VarChar(255)
    description        String @db.VarChar(255)
    api_type           Int    @default(0)
    api_entry          String @db.VarChar(255)
    api_default_params Json?
    created_at         BigInt
    updated_at         BigInt
    deleted_at         BigInt @default(0)
}

model t_task {
    id           BigInt  @id @default(autoincrement())
    parameter    Json
    image1       Bytes?  @db.MediumBlob
    image2       Bytes?  @db.MediumBlob
    image3       Bytes?  @db.MediumBlob
    image4       Bytes?  @db.MediumBlob
    created_at   BigInt
    updated_at   BigInt
    deleted_at   BigInt  @default(0)
    user_id      String  @db.VarChar(255)
    status       Int     @default(1)
    message      String? @db.Text
    max_steps    Int     @default(0)
    current_step Int     @default(0)

    @@index([created_at, user_id, status], map: "i_user_status")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
